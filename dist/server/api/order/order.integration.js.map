{"version":3,"sources":["../../../../server/api/order/order.integration.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;yBAGO,WAAW;;;;AAD/B,IAAI,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAG3B,IAAI,QAAQ,CAAC;;AAEb,QAAQ,CAAC,YAAY,EAAE,YAAW;;AAEhC,UAAQ,CAAC,iBAAiB,EAAE,YAAW;AACrC,QAAI,MAAM,CAAC;;AAEX,cAAU,CAAC,UAAS,IAAI,EAAE;AACxB,kCAAQ,GAAG,CAAC,CACT,GAAG,CAAC,aAAa,CAAC,CAClB,MAAM,CAAC,GAAG,CAAC,CACX,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAC9B,GAAG,CAAC,UAAC,GAAG,EAAE,GAAG,EAAK;AACjB,YAAI,GAAG,EAAE;AACP,iBAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;AACD,cAAM,GAAG,GAAG,CAAC,IAAI,CAAC;AAClB,YAAI,EAAE,CAAC;OACR,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,MAAE,CAAC,gCAAgC,EAAE,YAAW;AAC9C,YAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;KACxC,CAAC,CAAC;GAEJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,kBAAkB,EAAE,YAAW;AACtC,cAAU,CAAC,UAAS,IAAI,EAAE;AACxB,kCAAQ,GAAG,CAAC,CACT,IAAI,CAAC,aAAa,CAAC,CACnB,IAAI,CAAC;AACJ,YAAI,EAAE,WAAW;AACjB,YAAI,EAAE,gCAAgC;OACvC,CAAC,CACD,MAAM,CAAC,GAAG,CAAC,CACX,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAC9B,GAAG,CAAC,UAAC,GAAG,EAAE,GAAG,EAAK;AACjB,YAAI,GAAG,EAAE;AACP,iBAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;AACD,gBAAQ,GAAG,GAAG,CAAC,IAAI,CAAC;AACpB,YAAI,EAAE,CAAC;OACR,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,MAAE,CAAC,6CAA6C,EAAE,YAAW;AAC3D,YAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;AAC5C,YAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;KAClE,CAAC,CAAC;GAEJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,qBAAqB,EAAE,YAAW;AACzC,QAAI,KAAK,CAAC;;AAEV,cAAU,CAAC,UAAS,IAAI,EAAE;AACxB,kCAAQ,GAAG,CAAC,CACT,GAAG,CAAC,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,CAClC,MAAM,CAAC,GAAG,CAAC,CACX,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAC9B,GAAG,CAAC,UAAC,GAAG,EAAE,GAAG,EAAK;AACjB,YAAI,GAAG,EAAE;AACP,iBAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;AACD,aAAK,GAAG,GAAG,CAAC,IAAI,CAAC;AACjB,YAAI,EAAE,CAAC;OACR,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,aAAS,CAAC,YAAW;AACnB,WAAK,GAAG,EAAE,CAAC;KACZ,CAAC,CAAC;;AAEH,MAAE,CAAC,yCAAyC,EAAE,YAAW;AACvD,YAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;AACzC,YAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;KAC/D,CAAC,CAAC;GAEJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,qBAAqB,EAAE,YAAW;AACzC,QAAI,YAAY,CAAC;;AAEjB,cAAU,CAAC,UAAS,IAAI,EAAE;AACxB,kCAAQ,GAAG,CAAC,CACT,GAAG,CAAC,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,CAClC,IAAI,CAAC;AACJ,YAAI,EAAE,eAAe;AACrB,YAAI,EAAE,8BAA8B;OACrC,CAAC,CACD,MAAM,CAAC,GAAG,CAAC,CACX,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAC9B,GAAG,CAAC,UAAS,GAAG,EAAE,GAAG,EAAE;AACtB,YAAI,GAAG,EAAE;AACP,iBAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;AACD,oBAAY,GAAG,GAAG,CAAC,IAAI,CAAC;AACxB,YAAI,EAAE,CAAC;OACR,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,aAAS,CAAC,YAAW;AACnB,kBAAY,GAAG,EAAE,CAAC;KACnB,CAAC,CAAC;;AAEH,MAAE,CAAC,uCAAuC,EAAE,YAAW;AACrD,YAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AACpD,YAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;KACpE,CAAC,CAAC;GAEJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,wBAAwB,EAAE,YAAW;;AAE5C,MAAE,CAAC,+CAA+C,EAAE,UAAS,IAAI,EAAE;AACjE,kCAAQ,GAAG,CAAC,UACH,CAAC,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,CACrC,MAAM,CAAC,GAAG,CAAC,CACX,GAAG,CAAC,UAAC,GAAG,EAAE,GAAG,EAAK;AACjB,YAAI,GAAG,EAAE;AACP,iBAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;AACD,YAAI,EAAE,CAAC;OACR,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,MAAE,CAAC,mDAAmD,EAAE,UAAS,IAAI,EAAE;AACrE,kCAAQ,GAAG,CAAC,UACH,CAAC,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,CACrC,MAAM,CAAC,GAAG,CAAC,CACX,GAAG,CAAC,UAAC,GAAG,EAAE,GAAG,EAAK;AACjB,YAAI,GAAG,EAAE;AACP,iBAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;AACD,YAAI,EAAE,CAAC;OACR,CAAC,CAAC;KACN,CAAC,CAAC;GAEJ,CAAC,CAAC;CAEJ,CAAC,CAAC","file":"order.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newOrder;\n\ndescribe('Order API:', function() {\n\n  describe('GET /api/orders', function() {\n    var orders;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/orders')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          orders = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      expect(orders).to.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/orders', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/orders')\n        .send({\n          name: 'New Order',\n          info: 'This is the brand new order!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newOrder = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created order', function() {\n      expect(newOrder.name).to.equal('New Order');\n      expect(newOrder.info).to.equal('This is the brand new order!!!');\n    });\n\n  });\n\n  describe('GET /api/orders/:id', function() {\n    var order;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/orders/' + newOrder._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          order = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      order = {};\n    });\n\n    it('should respond with the requested order', function() {\n      expect(order.name).to.equal('New Order');\n      expect(order.info).to.equal('This is the brand new order!!!');\n    });\n\n  });\n\n  describe('PUT /api/orders/:id', function() {\n    var updatedOrder;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/orders/' + newOrder._id)\n        .send({\n          name: 'Updated Order',\n          info: 'This is the updated order!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedOrder = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedOrder = {};\n    });\n\n    it('should respond with the updated order', function() {\n      expect(updatedOrder.name).to.equal('Updated Order');\n      expect(updatedOrder.info).to.equal('This is the updated order!!!');\n    });\n\n  });\n\n  describe('DELETE /api/orders/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/orders/' + newOrder._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when order does not exist', function(done) {\n      request(app)\n        .delete('/api/orders/' + newOrder._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}